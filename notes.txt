GitHub Upload
    - in github.com
        - create an empty repository
    - Prepare your project locally
        go to terminal
            - git init 
                (creates a .git folder inside the project folder)
            - git add .
                (will select all modified files which are not present in github already)
            - git commit -m "description about your upload"
                (committing the selected files to be uploaded to github)
            - git branch -M main
                (commit should be done to this "main" branch in github)
            - git remote add origin <repository url>.git
                (mapping the remote repository to the local folder)
            - git push -u origin main
                (finally uploading all the committed files to github)

GitHub Deploy
    - in the project folder
        - open package.json
            - in the "scripts" property... add
                "predeploy": "npm run build",
                "deploy": "gh-pages -d dist"
        - open vite.config.js
            - copy the github repository folder name alone like this... "/reponame/"
                "base": "/reponame/"
        - in the terminal, intall gh-pages package
            npm i -D gh-pages
                (this "gh-pages" package will be installed as "DevDependencies")
            - npm run deploy
                (this will internally run the command "npm run build" and then "gh-pages" will be deployed in the github repository as branch)
                (this will also take care of hosting the 'gh-pages' branch as GitHub Page, where you can use the link to view the output)

in App component
	- declare different kinds of variables
		- using js expressions print the values in JSX

	- render by looping
		- using map method (within JSX)
		- using array method (within function)

	- conditional rendering
		- using ternary operator ( () ? : )
		- using && operator

	- create "components" folder inside "src" folder
		- create a single .jsx file
			- create multiple function components
			- export 1 function as default
			- export other remaining functions as optional ( {} )
		- come back to App.jsx
			- import
				- import directly at the top by typing a few letters alone... and choose from the dropdown and click enter
					- use that component inside App function within the JSX
				- use the component directly and click enter, where the import statement will be created for you at the top automatically

		- pass data (variables) as HTML attributes (aka properties)
		- retrieve that variables as "props" parameter in the Child Component
			- render the props in the JSX